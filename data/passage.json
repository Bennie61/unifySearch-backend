{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1701432619528462338",
        "title": "JavaScript-DOM解析",
        "description": null,
        "content": "# JavaScript-DOM 操作\n\n\n## 获取属性\n在 JavaScript 中，你可以使用以下方式获取元素的属性：\n\n- `getElementById()`：通过元素的 id 获取 DOM 元素。\n- `getElementsByClassName()`：通过元素的类名获取 DOM 元素。\n- `getElementsByTagName()`：通过元素的标签名获取 DOM 元素。\n- `querySelector()`：通过 CSS 选择器获取 DOM 元素。\n- `querySelectorAll()`：通过 CSS 选择器获取所有匹配的 DOM 元素。\n\n## 操作属性\nCURD 示例\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>属性操作</title>\n    <script>\n        window.onload = function () {\n            let element = document.querySelector(\"#box\");\n            // 标准属性\n            //获取id 属性的值\n            console.log(element.id);\n            console.log(element['id']);\n            console.log(element.getAttribute('id'));\n\n            //设置id 属性的值\n            element.id = 'box2';\n            element['id'] = 'box3';\n            element.setAttribute('id', 'box4');\n\n\n            console.log('<------------------------>');\n            //自定义属性\n            // element.xxx ='xxx';\n            // element['xxx'] = 'xxx';\n            // 自定义属性的值只能通过setAttribute() 方法设置属性\n            element.setAttribute(\"xxx\", 'xxx')\n            // 自定义属性的值只能通过getAttribute() 方法获取属性\n            element.getAttribute('xxx');\n\n\n            // 操作特殊属性\n            // 1. class 属性 需要使用className, 因为class 是关键字\n            //console.log(element.class);\n            console.log(element.className);\n           // console.log(element['class']);\n            console.log(element['className']);\n            console.log(element.getAttribute('class'));\n            // 2.style 属性\n            console.log(element.style);\n            console.log(element.style.width);\n            console.log(element.style.height);\n            console.log(element.style[\"background-color\"]);\n            console.log(element.style.backgroundColor);\n            element.style.width = '300px';\n            element.style.height = '300px';\n            element.style.backgroundColor = 'blue';\n            element.style.backgroundImage = 'url(../img/1.jpg)';\n\n            // 属性名和属性值相同\n            // 有这个属性就是true, 没有就是false\n            let element1 = document.querySelector('[type=checkbox]');\n            console.log(element1.checked);\n            element1.checked = true;  // 选中\n        }\n\n    </script>\n\n</head>\n<body>\n<div id=\"box\" class=\"box\" style=\"width: 200px;height: 200px;background-color: pink\"></div>\n<input type=\"checkbox\" >\n</body>\n</html>\n```\n## NOde获取\n\n```js\n        element.firstChild; // 第一个子节点\n        element.lastChild; // 最后一个子节点\n        element.childNodes; // 所有子节点\n        element.previousSibling; // 上一个兄弟节点\n        element.nextSibling; // 下一个兄弟节点\n        element.parentNode; // 父节点\n        element.parentNode.parentNode.parentNode  //document\n```\n## Node 操作\n\n\n## 事件处理",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 3,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-12T03:08:42.000+00:00",
        "updateTime": "2023-09-12T04:51:10.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 5,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-07T09:24:25.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1700845181969997825",
        "title": "前端学习之JavaScript-day01",
        "description": null,
        "content": "1. js 代码编写的位置 :\n    1. 内部js代码\n    2. 外部js代码\n    3. 行内js代码\n   4. 三种方式的优先级： 行内 > 内部 > 外部\n\n2. js变量的定义和使用\n    \n        1. var\n        2. let\n        3. const\n        4. 变量的使用： 变量名\n3. js数据类型\n    1. 基本数据类型\n        1. number\n        2. string\n        3. boolean\n        4. undefined\n        5. null\n    2. 引用数据类型\n        1. object\n        2. array\n        3. function\n        4. date\n        5. 正则表达式\n        6. Math\n        7. ...\n       8. 以上都是对象\n4. 运算符\n\n        1. ==  ===\n\n`==` 会自动转换数据类型，再比较值是否相等；\n\n`===` 不会自动转换数据类型,先比较数据类型，再比较值是否相等；\n\n       2. &&   ||\n    \n`&&` 逻辑与，两边都为真，结果为真，否则为假；\n\n总体为假,返回第一个的值；总体为真，返回第二个的值；\n   \n`||` 逻辑或，两边都为假，结果为假，否则为真；\n\n总体为真,返回第一个的值；总体为假，返回最后一个的值；\n    \n5. 函数的定义和调用(**重中之重**)\n\n  1. 普通函数定义\n   ```js\n    function 函数名(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n```\n2. 匿名函数的定义\n    ```js\n    var 函数名 = function(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n    \n    //立即调用函数\n    (function(形式参数1, 形式参数2, ...) {\n         函数体;\n    })(实际参数1, 实际参数2, ...);\n    ```\n    3. 箭头函数的定义\n    \n    ```javascript\n    var 函数名 = (形式参数1, 形式参数2, ...) => {\n         函数体;\n    }\n    ```\n    \n    4. 函数调用： 函数名(实际参数);\n    ```javascript\n    function 函数名(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n    函数名(实际参数1, 实际参数2, ...);\n    ```\n    \n    5. 理解到匿名函数的使用(难点)\n    ```javascript\n    // 普通使用\n    var 函数名 = function(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n    函数名(实际参数1, 实际参数2, ...);\n    \n    //函数作为参数使用\n    function fun() {\n         函数体;\n    }\n    \n    function fun2(fun) {\n         函数体;\n    }\n    ```\n    \n\n6. 构造函数/创建对象/对象的成员访问/字面式创建对象\n```javascript\n//构造函数\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n    this.say = function() {\n        console.log(\"我是\" + this.name + \",今年\" + this.age + \"岁了\");\n    }\n}\n// 创建对象\n// 构造函数的调用方式\nvar p1 = new Person(\"张三\", 18);\np1.say();\n// 字面量\nvar p2 = {\n    name: \"李四\",\n    age: 20,\n    say: function() {\n        console.log(\"我是\" + this.name + \",今年\" + this.age + \"岁了\");\n    }\n}\n// 对象的成员访问\np2.name;\np2.age;\n```\n\n6. 数组的定义(简写方式)\n```javascript\n// 定义数组\nvar arr = [1, 2, 3, 4, 5];\n```\n\n7. 数组的遍历(普通)\n```javascript\n// for i 循环\nfor (var i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n// for in 循环\nfor (var i in arr) {\n    console.log(arr[i]);\n}\n// forEach 循环\narr.forEach(function(value, index, array) {\n    console.log(value);\n});\n\n// map 循环\narr.map(function(value, index, array) {\n    console.log(value);\n});\n```\n\n9. 需要理解 forEach / map，从而理解匿名函数在开发中的使用\n```javascript\n// forEach 循环  ---->获取数组中的每一个元素\n// map 循环  ---->获取数组中的每一个元素,可以整体修改数组中的元素,并返回一个新的数组\n```\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 8,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-10T12:14:26.000+00:00",
        "updateTime": "2023-09-12T03:25:23.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 5,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-07T09:24:25.000+00:00"
        },
        "tags": [
          "文章",
          "Javascript",
          "前端",
          "Java",
          "后端",
          "学习路线"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1700314161856225281",
        "title": "HTML 基础学习",
        "description": "常用标签",
        "content": "# HTML\n\nhtml 的结构 : 头,身体\nhtml 的语法 :\n\t\t\t\t\t标签/元素, 所有字母小写, 都应该是闭合\n\t\t\t\t\t属性,  属性和元素的关系   可以有多个, 多个之间使用空格分隔,属性值需要加引号(\"  ')\n\n**常用的元素**\n\n<table>\n  <tr align=\"center\"><th colspan='4'>结构标签</th></tr>\n  <tr>\n    <td>html</td>\n    <td>主标签</td></td>\n    <td>head</td>\n    <td>头标签</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>页面标题</td>\n    <td>body</td>\n    <td>主体标签</td>\n  </tr>\n</table>\n<table>\n  <tr align=\"center\"><th colspan='4'>常用标签</th></tr>\n    <tr>\n    <td>div</td>\n    <td>结构标签，占满一行，有换行</td>\n    <td>span</td>\n    <td>文本标签，不换行，宽由内容决定</td>\n  </tr>\n  <tr>\n    <td>p</td>\n    <td>段落标签，换行，行间距大</td>\n    <td>h1~h6</td>\n    <td>一号到六号标题</td>\n  </tr>\n  <tr>\n    <td>br</td>\n    <td>换行标签</td>\n    <td>hr</td>\n    <td>分割线标签</td>\n  </tr>\n</table>\n\n\n**今天的重点元素**\n\n| 标签描述                                                     | 标签     | 重要属性                        |\n| ------------------------------------------------------------ | -------- | ------------------------------- |\n| **超链接**                                                   | a        | href/name/target                |\n| **图片**                                                     | img      | src                             |\n| **表格**                                                     | table    | border/width/cell... = 0        |\n| 行                                                           | tr       | align                           |\n| 标题                                                         | th       | colspan,rowspan                 |\n| 普通列                                                       | td       | colspan,rowspan                 |\n|                                                              |          |                                 |\n| **表单**                                                     | form     | action/method(get,post)/enctype |\n| 文本框<br/>   密码框<br/>   隐藏域<br/>   单选框\tchecked<br/>   复选框\tchecked<br/>   上传控件<br/>   提交按钮<br/>   重置按钮<br/>   普通按钮 | input    | type/name/value<br/>            |\n| 下拉列表                                                     | select   | name                            |\n| 下拉选项                                                     | option   | value/selected                  |\n| 文本域                                                       | textarea | name                            |\n\n**记住: 标签的作用, 和对应的常见属性的作用**",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 18,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-09T01:04:21.000+00:00",
        "updateTime": "2023-09-12T04:49:55.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 5,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-07T09:24:25.000+00:00"
        },
        "tags": [
          "文章",
          "HTML",
          "前端"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1699795353097838593",
        "title": "Spring 整合MyBatis",
        "description": "整合DAO层,实现事务管理",
        "content": "## Spring 整合MyBatis\n1. **作用**\n   1. 将SqlSessionFactory对象交给spring管理，从spring中直接去到mapper的对象\n2. **逻辑**\n\n   1. **数据库准备**\n   2. **创建maven项目加入maven依赖**\n   3. **创建实体类**\n   4. **创建mapper接口及mapper映射文件文件**\n   5. **创建mybatis主配置文件**\n   6. **创建Service接口及实现类**\n   7. **创建spring配置文件（声明mybatis对象交给spring创建）**\n      1. **数据源（dataSource）**\n      2. **SqlSessionFactory**\n      3. **声名自定义的mapper对象**\n      4. **声明自定义的service**\n      5. **在spring配置文中为service实现类添加事务管理**\n   8. **创建测试类，获取service对象，通过service对象完成对数据库的操作**\n\n\n3. **实例**\n   1. 需求：通过spring+mybatis实现简单的转账功能\n   2. **数据库准备**\n```sql\nCREATE TABLE `account` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `balance` decimal(10,2) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n   3. **创建maven项目加入maven依赖**\n```java\n<dependencies>\n\t<!-- 数据库驱动 -->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.28</version>\n        <scope>runtime</scope>\n    </dependency>\n    \n    <!-- 数据库连接池 -->\n    <dependency>\n    \t<groupId>com.alibaba</groupId>\n    \t<artifactId>druid</artifactId>\n    \t<version>1.1.9</version>\n    </dependency>\n    \n    <!-- MyBatis 相关 -->\n    <dependency>\n    \t<groupId>org.mybatis</groupId>\n    \t<artifactId>mybatis</artifactId>\n    \t<version>3.4.5</version>\n    </dependency>\n    \n    <!-- Spring 集成 MyBatis 的依赖 -->\n    <dependency>\n    \t<groupId>org.mybatis</groupId>\n    \t<artifactId>mybatis-spring</artifactId>\n    \t<version>1.3.1</version>\n    </dependency>\n    <dependency>\n    \t<groupId>org.slf4j</groupId>\n    \t<artifactId>slf4j-log4j12</artifactId>\n    \t<version>1.7.25</version>\n    </dependency>\n    \n    <!-- Spring 相关 -->\n    <dependency>\n    \t<groupId>org.springframework</groupId>\n    \t<artifactId>spring-jdbc</artifactId>\n   \t\t<version>5.0.8.RELEASE</version>\n    </dependency>\n    <dependency>\n    \t<groupId>org.aspectj</groupId>\n   \t\t<artifactId>aspectjweaver</artifactId>\n    \t<version>1.8.13</version>\n    </dependency>\n    <dependency>\n    \t<groupId>org.springframework</groupId>\n    \t<artifactId>spring-context</artifactId>\n    \t<version>5.0.8.RELEASE</version>\n    </dependency>\n    </dependencies>\n    \n    <!-- 测试相关 -->\n    <dependency>\n    \t<groupId>org.springframework</groupId>\n    \t<artifactId>spring-test</artifactId>\n    \t<version>5.0.8.RELEASE</version>\n    \t<scope>test</scope>\n    </dependency>\n    <dependency>\n    \t<groupId>junit</groupId>\n    \t<artifactId>junit</artifactId>\n    \t<version>4.12</version>\n    \t<scope>test</scope>\n    </dependency>\n    \n    <!-- 插件相关-->\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <version>1.18.22</version>\n        <scope>provided</scope>\n\t</dependency>\n\n</dependencies>\n```\n\n   4. **创建实体类**\n```java\n@Getter@Setter@ToString\n@AllArgsConstructor\n@NoArgsConstructor\n\npublic class Account {\n    private Long id;\n    private BigDecimal balance;\n}\n```\n\n   5. **创建mapper接口及mapper映射文件文件**\n```java\npublic interface AccountMapper {\n    //加钱,通过id添加账户的余额\n    void addBalance(@Param(\"id\") Long id, @Param(\"amount\") BigDecimal amount);\n    //减钱,通过id减少账户的余额，再添加到对应账户的余额中\n    void subtractBalance(@Param(\"id\") Long id, @Param(\"amount\") BigDecimal amount);\n}\n```\n```java\n<mapper namespace=\"cn.wolfcode.mapper.AccountMapper\">\n\t<!--加钱-->\n    <update id=\"addBalance\">\n        update account set balance = balance+#{amount} where id =#{id}\n    </update>\n\t<!--减钱-->\n    <update id=\"subtractBalance\">\n        update account set balance = balance-#{amount} where id =#{id}\n    </update>\n</mapper>\n```\n\n   6. **创建mybatis主配置文件**\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!--映射，注册和创建连接池，都会在spring的配置文件中创建，所以mapper主配置文件中不需要添加-->\n</configuration>\n```\n\n   7. **创建Service接口及实现类**\n```java\npublic interface IAccountService {\n    /**\n     * 转账\n     * @param inId 转入的账户id\n     * @param outId 转出的账户id\n     * @param amount 转账金额\n     */\n    void transfer(Long inId, Long outId, BigDecimal amount);\n}\n```\n```java\n@Service//通过业务层，连接持久层，形成分成管理\npublic class AccountServiceImpl implements IAccountService {\n\n    @Autowired\n    private AccountMapper mapper;//需要关联mapper对象才能对数据库做操作\n    @Override\n    public void transfer(Long inId, Long outId, BigDecimal amount) {\n        //一个业务,完成转账功能\n        mapper.addBalance(inId,amount);\n        mapper.subtractBalance(outId,amount);\n    }\n}\n```\n\n   8. **创建spring配置文件（声明mybatis对象交给spring创建）**\n      1. **数据源（dataSource）**\n```xml\n<!--连接池先关联文件,随时可以更换连接池-->\n<context:property-placeholder location=\"db.properties\"/>\n<!--创建连接池-->\n<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n  <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n  <property name=\"url\" value=\"${jdbc.url}\"/>\n  <property name=\"username\" value=\"${jdbc.username}\"/>\n  <property name=\"password\" value=\"${jdbc.password}\"/>\n</bean>\n```\n\n      2. **SqlSessionFactory**\n```xml\n<!--创建sqlSessionFactory对象-->\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  <!--sqlSessionFactory需要连接池-->\n  <property name=\"dataSource\" ref=\"dataSource\"/>\n  <!--类型的别名-->\n  <property name=\"typeAliasesPackage\" value=\"cn.wolfcode.domain\"/>\n  <!--mybatis主配置文件路径-->\n  <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\n  <!--mapper映射文件-->\n  <property name=\"mapperLocations\" value=\"classpath:cn/wolfcode/mapper/*Mapper.xml\"/>\n</bean>\n```\n\n      3. **声名自定义的mapper对象**\n```xml\n<!--AccountMapper对象-->\n<bean id=\"mapper\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\">\n  <!--指定创建哪个mapper接口的对象,spring会用sqlSession创建mapper对象,-->\n  <property name=\"mapperInterface\" value=\"cn.wolfcode.mapper.AccountMapper\"/>\n  <!--spring会从sqlSessionFactory获取取sqlSession，所以我们需要指定sqlSessionFactory-->\n  <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"/>\n</bean>\n```\n\n      4. **声明自定义的service**\n```xml\n</bean>\n\t<!--service对象-->\n\t<bean id=\"service\" class=\"cn.wolfcode.service.impl.AccountServiceImpl\">\n\t<!--需要关联mapper属性-->\n  <property name=\"mapper\" ref=\"mapper\"/>\n</bean>\n```\n\n      5. **在spring配置文中为service实现类添加事务管理**\n```xml\n<!-- 配置事务管理器 WHAT -->\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n  <!--需要关联连接池-->\n  <property name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\n\n<!-- 配置增强，加关联 WHAT transaction-manager指定spring的事务管理-->\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n  <tx:attributes>\n    <!-- 这里可以针对不同方法进行差异化配置 -->\n    <tx:method name=\"*\"/>\n  </tx:attributes>\n</tx:advice>\n\n<!--AOP织入-->\n<aop:config>\n  <!-- 配置切入点 WHERE -->\n  <aop:pointcut id=\"pc\" expression=\"execution(* cn.wolfcode.service.impl.*ServiceImpl.*(..))\"/>\n  <!-- 关联需要的增强 -->\n  <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pc\"/>\n</aop:config>\n```\n\n   9. **创建测试类，获取service对象，通过service对象完成对数据库的操作**\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:applicationContext.xml\")\npublic class AccountServiceImplTest {\n    @Autowired\n    private IAccountService accountService;\n\n    @Test\n    public void testTransfer() {\n        accountService.transfer(2l,1l,new BigDecimal(\"1000\"));\n    }\n```\n\n4. **事务方法属性配置**\n| 属性 | 是否需要？ | 默认值 | 描述 |\n| --- | --- | --- | --- |\n| name | 是 |   | 与事务属性关联的方法名。通配符（*）可以用来指定一批关联到相同的事务属性的方法。 如 |\n| propagation | 不 | REQUIRED | 事务传播行为 |\n| isolation | 不 | DEFAULT | 事务隔离级别 |\n| timeout | 不 | -1 | 事务超时的时间（以秒为单位） |\n| read-only | 不 | false | 事务是否只读？ |\n| rollback-for | 不 |   | 将被触发进行回滚的 Exception(s)；以逗号分开。  |\n| no-rollback-for | 不 |   | 不 被触发进行回滚的 Exception(s)；以逗号分开。  |\n\n5. **事务的注解 @Transactional**\n   1. 作用域\n\n- 贴业务类或业务接口上，事务的配置是通用与整个类或接口的的方法；\n- 贴业务方法上，即方法上的的事务的配置仅限于被贴的方法；\n- 同时存在时，后者覆盖前者。\n  :::\n\n      1. **实现：**\n         1. 在spring文件中配置\n```xml\n<!--事务注解扫描-->\n<bean id=\"txManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n  <property name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\n<tx:annotation-driven transaction-manager=\"txManager\"/>\n```\n\n         2. 在业务层贴上注解\n```java\n@Transactional\npublic class AccountServiceImpl implements IAccountService {\n\t@Autowired\n\tprivate AccountMapper accountMapper;\n\n\t@Override\n\tpublic void transfer(Long outId, Long inId, BigDecimal amount) {\n\t\taccountMapper.subtractBalance(outId, amount);\n\t\tint i = 1/0;\n\t\taccountMapper.addBalance(inId, amount);\n\t}\n}\n```\n\n      2. 通用注解配置\n```java\n<tx:attributes> //从上往下依次匹配\n    <tx:method name=\"get*\" read-only=\"true\"/>\n    <tx:method name=\"list*\" read-only=\"true\"/>\n    <tx:method name=\"query*\" read-only=\"true\"/>\n    <tx:method name=\"count*\" read-only=\"true\"/>\n    <tx:method name=\"*\"/>\n</tx:attributes>\n```\n> **注意：**如果在spring文件中没有对业务层（**service对象**）和持久层（**mapper对象**）做对象管理，这时就不能贴注解\n> 可以手动添加。也可以为业务层和持久成贴注解\n\n```xml\n<!--添加IoC扫描-->\n<context:component-scan base-package=\"cn.wolfcode.service\"/>\n<!--添加ID扫描-->\n<context:annotation-config/>\n\n<!--mapper统一配置-->\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n  <property name=\"basePackage\" value=\"cn.wolfcode.mapper\"/>\n</bean>\n```\n\n6. **事务的传播规则（了解）**\n- **REQUIRED**：必须存在事务，如果当前存在一个事务，则加入该事务，否则将新建一个事务（默认）。\n- **SUPPORTS**：支持当前事务，指如果当前存在事务，就加入到该事务，如果当前没有事务，就以非事务方式执行。\n- MANDATORY：必须有事务，使用当前事务执行，如果当前没有事务，则抛出异常 IllegalTransactionStateException。\n- **REQUIRES_NEW**：不管当前是否存在事务，每次都创建新的事务\n- NOT_SUPPORTRD：以非事务方式执行，如果当前存在事务，就把当前事务暂停，以非事务方式执行\n- NEVER：不支持事务，如果当前存在是事务，则抛出异常，IllegalTransactionStateException\n- NESTED ：寄生事务，如果当前存在事务，则在内部事务内执行，如果当前不存在事务，则创建一个新的事务，嵌套事务使用数据库中的保存点来实现，即嵌套事务回滚不影响外部事务，但外部事务回滚将导致嵌套事务回滚。\n- DataSourceTransactionManager默认支持，而 HibernateTransactionManager 默认不支持，需要手动开启。\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 24,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-07T14:42:47.000+00:00",
        "updateTime": "2023-09-12T03:28:51.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 5,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-07T09:24:25.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "框架",
          "Spring"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1699231628989145089",
        "title": "Spring day-02-DI,IoC,AOP",
        "description": "IoC注解,DI注解,AOP--xml配置及注解配置",
        "content": "## DI 注解\n1. @Autowired：\n\n用于自动装配（自动注入）Bean的依赖关系。\n\n可以用在构造方法、Setter 方法、成员变量、方法上。\n\nSpring 会根据类型（或名称）自动寻找匹配的 Bean 并注入。\n\n\n```java\n@Component\npublic class MyService {\n    @Autowired @Setter\n    private MyMapper mapper;\n    \n}\n```\n2. @Value：\n\n用于注入属性值。\n\n可以注入基本数据类型、字符串、表达式等。\n\n```java\n@Value(\" xxx \")\nprivate String apiKey;\n\n```\n\n## IoC 注解\n@Component：\n用于声明一个类为 Spring 组件，会被 Spring 自动扫描并注册为 Bean。\n可以使用它来标记普通的 Java 类。\n\n```java\n@Component\npublic class MyComponent {\n    // ...\n}\n```\n\n@Service、@Repository、@Controller：\n\n这些是特定类型的组件注解，用于标记服务类、仓库类和控制器类。\nSpring 通常使用这些注解来更好地组织应用程序的不同层。\n\n```java\n@Service\npublic class MyService {\n    // ...\n}\n\n@Repository\npublic class MyRepository {\n    // ...\n}\n\n@Controller\npublic class MyController {\n    // ...\n}\n```\n\n## IoC 和DI 注解的扫描器\nDI扫描器可以不写,但建议都加上.\n\n```xml\n<!--使用 <context:component-scan> 扫描器配置组件扫描 (IoC 注解的扫描器)-->\n\n<context:component-scan base-package=\"com.example.myapp\"/>\n<!--在上面的示例中，base-package 属性指定了要扫描的基础包路径，\nSpring 会自动扫描该包及其子包下的类，将标记为组件的类注册为 Bean。-->\n\n\n\n<!--使用 <context:annotation-config> 启用注解驱动  DI注解的扫描器 -->\n\n<context:annotation-config/>\n<!--这个元素会告诉 Spring 启用注解处理器，\n以便解析和处理类中的注解，例如 @Autowired、@Value 等。-->\n\n```\n\n## AOP\nAOP（面向切面编程）是一种编程范式，它允许你在应用程序的不同模块中插入自定义的行为，而无需修改原始代码。AOP 的核心思想是通过将横切关注点（cross-cutting concerns）从主要业务逻辑中分离出来，然后将这些关注点模块化，以便重复使用。(增强功能,在指定类的指定方法上植入逻辑代码)\n\n\n具体操作: where(aspectJ的语法), when(before, after-returning, after-throwing), what(自行编写需要增强的功能代码)\n\n\n### xml配置文件织入事务管理器\nspring - xml 配置文件(推荐)\n```xml\n<!--做什么功能增强-->\n    <bean id=\"txManager\" class=\"xyz.bycor._03_aop.MyTransactionManager\"/>\n<!--  service  -->\n    <bean id=\"service\" class=\"xyz.bycor._03_aop.EmployeeServiceImpl\"/>\n    <!-- aop-->\n    <aop:config>\n        <aop:aspect ref=\"txManager\">\n            <!--在哪个类的哪个方法织入功能增强代码-->\n            <aop:pointcut id=\"txPointcut\" expression=\"execution(* xyz.bycor._03_aop.EmployeeServiceImpl.*(..))\"/>\n            <!-- 在这个方法运行前织入xxx代码-->\n            <aop:before method=\"begin\" pointcut-ref=\"txPointcut\"/>\n            <!-- 在这个方法运行后织入xxx代码-->\n            <aop:after-returning method=\"commit\" pointcut-ref=\"txPointcut\"/>\n            <!-- 在这个方法异常后织入xxx代码-->\n            <aop:after-throwing method=\"rollback\" pointcut-ref=\"txPointcut\"/>\n        </aop:aspect>\n    </aop:config>\n```\n### 注解\nxml 文件配置 -- 添加AOP 扫描器\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n<!--  ioc 扫描器  -->\n    <context:component-scan base-package=\"xyz.bycor._04_aop_annootion\"/>\n<!--  aop注解 扫描器  -->\n    <aop:aspectj-autoproxy />\n</beans>\n```\n\n要织入的增强java 代码示例:\n```java\n// 模拟事务管理器\n@Component  // 将织入的类交给Spring 管理\n@Aspect //表示切面\npublic class MyTransactionManager {\n    // 定义切入点\n    @Pointcut(\"execution(* xyz.bycor._04_aop_annootion.*ServiceImpl.*(..))\")\n    public void txPoint(){\n    }\n    @Before(\"txPoint()\")\n    public void begin(){\n        System.out.println(\"开启事务\");\n    }\n    @AfterReturning(\"txPoint()\")\n    public void commit(){\n        System.out.println(\"提交事务\");\n    }\n    @AfterThrowing(\"txPoint()\")\n    public void rollback(){\n        System.out.println(\"回滚事务\");\n    }\n}\n```\n\n\n\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 13,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-06T01:22:45.000+00:00",
        "updateTime": "2023-09-11T12:33:39.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 5,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-07T09:24:25.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "框架",
          "交流社区",
          "后端"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1698805798047686658",
        "title": "java学习之 Spring -day-01",
        "description": "初步认识 Spring",
        "content": "# Spring\n Ioc,DI,Aop.\n\n### Spring体系\n![Spring体系.png](https://pic.code-nav.cn/post_picture/1673111457186713601/vpnZ50hj-Spring体系.png)\n### 开发作用\n\n![Spring在开发中的作用.png](https://pic.code-nav.cn/post_picture/1673111457186713601/NFVO2C2z-Spring在开发中的作用.png)\n\n### \n\n## IOC 思想 (解耦最优)\nIOC是Spring框架的核心思想之一。它指的是将对象的创建和管理交给Spring容器，而不是由开发人员手动创建和管理对象。通过IOC，应用程序的组件之间的依赖关系由容器来管理，这使得代码更加松耦合，可维护性更高。IoC只是一种思想,具体的实现方法是依赖注入.\n| 特性                   | 传统编程方式                                     | 使用IOC的方式                                      |\n|------------------------|-------------------------------------------------|----------------------------------------------------|\n| 对象创建               | 应用程序代码负责手动创建对象                     | 容器负责创建和管理对象                           |\n| 依赖关系管理           | 应用程序代码负责管理对象之间的依赖关系             | 容器负责管理和解决对象之间的依赖关系               |\n| 控制权                 | 应用程序代码控制对象的创建和生命周期               | 控制权交给容器，容器控制对象的创建和生命周期          |\n| 松耦合                 | 通常存在较高的耦合度，因为对象需要直接引用其他对象   | 通过配置和注入，对象之间的耦合度降低                |\n| 可维护性               | 难以维护和修改，因为对象创建和依赖关系散布在应用程序中 | 易于维护和修改，因为依赖关系和配置集中在容器中        |\n| 测试                   | 单元测试通常更加复杂，因为对象需要手动创建和模拟依赖  | 单元测试更容易进行，因为容器可以创建和管理对象，并提供依赖注入 |\n| 扩展性                 | 较差的可扩展性，因为对象之间的耦合度高               | 更好的可扩展性，因为对象之间的耦合度低，可以轻松替换和添加新对象  |\n\n\n\n### Spring 配置文件中的 Bean \n\n#### Bean 的属性\n| 属性/子节点     | 描述                                                         | 示例                                                |\n|----------------|------------------------------------------------------------|----------------------------------------------------|\n| **属性：**     |                                                              |                                                    |\n| `id`           | Bean的唯一标识符。                                           | `<bean id=\"myBean\" ...>`                          |\n| `class`        | 指定要创建的Bean的类的全限定名。                                | `<bean class=\"com.example.MyBeanClass\" ...>`      |\n| `name`         | Bean的名称，可以是一个或多个逗号分隔的值，作为Bean的别名。       | `<bean name=\"bean1,bean2,bean3\" ...>`             |\n| `scope`        | 指定Bean的作用域，可以是 \"singleton\"、\"prototype\"、\"request\"、\"session\" 等。 | `<bean scope=\"singleton\" ...>`                    |\n| `init-method`  | 指定Bean初始化时调用的方法名。                                  | `<bean init-method=\"initMethod\" ...>`             |\n| `destroy-method` | 指定Bean销毁时调用的方法名。                                | `<bean destroy-method=\"destroyMethod\" ...>`       |\n| `value`        | 用于直接设置Bean的基本数据类型属性的值。                         | `<property name=\"propertyName\" value=\"propertyValue\" />` |\n| `ref`          | 用于引用其他Bean，将其注入到当前Bean的属性中，实现依赖注入。        | `<property name=\"dependencyBean\" ref=\"otherBean\" />` |\n| **子节点：**   |                                                              |                                                    |\n| `property`     | 用于进行属性注入，配置Bean的属性值。                           | `<property name=\"propertyName\" value=\"propertyValue\" />` |\n| `constructor-arg` | 用于进行构造函数注入，配置Bean的构造函数参数。                 | `<constructor-arg value=\"argValue\" />`            |\n| `qualifier`    | 用于指定自动装配（autowire）时的Bean限定符，解决依赖注入歧义问题。  | `<qualifier value=\"beanQualifier\" />`             |\n| `lookup-method` | 用于配置方法注入，允许在Bean中查找其他Bean。                   | `<lookup-method name=\"lookupMethodName\" bean=\"targetBean\" />` |\n| `set`          | 用于配置Set类型的属性，可以包含多个值。                        | `<property name=\"setProperty\"><set><value>value1</value><value>value2</value></set></property>` |\n| `list`         | 用于配置List类型的属性，可以包含多个值。                       | `<property name=\"listProperty\"><list><value>value1</value><value>value2</value></list></property>` |\n| `map`          | 用于配置Map类型的属性，可以包含多个键值对。                     | `<property name=\"mapProperty\"><map><entry key=\"key1\" value=\"value1\" /><entry key=\"key2\" value=\"value2\" /></map></property>` |\n\n\n\n#### Bean 的作用域\n在Spring中，Bean的作用域定义了Bean的生命周期和可见性范围。常见的Bean作用域包括：\n\n- Singleton（默认 单例模式）： 每个Spring容器中只有一个Bean实例。每次请求都是同一对象.\n\n- Prototype (多例模式)： 每次请求Bean时都会创建一个新的实例。每次请求都是新对象.\n\n### FactoryBean \nFactoryBean是Spring框架提供的一种特殊的Bean，它用于创建和配置其他Bean的实例。FactoryBean接口允许你自定义Bean的创建逻辑，可以用于复杂的Bean初始化过程。\n\n| 区别                                     | 使用 FactoryBean                                | 不使用 FactoryBean                             |\n|----------------------------------------|------------------------------------------------|-----------------------------------------------|\n| 自定义创建逻辑                           | 可以自定义创建Bean的逻辑，执行自定义初始化操作。   | 使用默认的构造函数创建Bean。                      |\n| 配置灵活性                               | 通过配置方式定义FactoryBean，可以根据配置创建不同类型的Bean。 | 配置相对简单，只需定义Bean的类和属性。               |\n| 懒加载                                   | 默认情况下是懒加载的，只有在第一次请求时才会创建实际的Bean实例。 | 不支持懒加载，Bean在Spring容器启动时立即创建。           |\n| 获取实际Bean实例的方式                  | 需要在Bean名称前加上 `&` 符号，如 `&myFactoryBean`，以获得实际Bean实例。 | 直接使用Bean的名称，无需额外符号。                    |\n\n\n\n## DI 依赖注入\nDI是Spring框架的另一个关键概念，它指的是将一个对象的依赖关系通过外部注入的方式解决，而不是在对象内部硬编码。Spring提供了两种主要的DI方式：\n\n- 设值注入\n\n设值注入是通过setter方法注入依赖关系的方式。通过在Bean的配置中使用<property>元素，你可以指定要注入的依赖。\n\n- 构造器注入\n    \n构造器注入是通过构造函数注入依赖关系的方式。通过在Bean的配置中使用<constructor-arg>元素，你可以指定要传递给构造函数的依赖。\n\n### 各种类型注入\n    \n    \n```\n    注入常量:  <property> 节点中嵌入value属性\n    引用其他Bean组件: <property> 节点嵌入 ref 属性\n    \n```\n\n除了设值注入和构造器注入，Spring还支持各种不同类型的注入，包括：\n\n注解注入： 使用注解（如@Autowired、@Resource等）进行依赖注入。\n    \n接口注入： 实现Spring的特定接口（如ApplicationContextAware、BeanFactoryAware等）以获取依赖。\n    \n基于Java配置的注入： 使用Java类来配置依赖注入。\n    \n属性注入： 使用@Value注解将属性值注入Bean。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1673111457186713601/vn02HcjP-spring-logo.svg",
        "language": null,
        "viewNum": 27,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-04T21:10:39.000+00:00",
        "updateTime": "2023-09-11T06:46:17.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 5,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-07T09:24:25.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "后端",
          "框架"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1698154399307767809",
        "title": "新人加入",
        "description": "自我介绍",
        "content": "一个刚毕业一年的二本Java后端程序员，分享一下自己工作经历，希望能给大家做为一个参考。 \n大学期间学校教的东西都是落伍的。毕业学期的十月份才注意到社会需求，开始b站疯狂刷视频补课。\n毕业后找公司面试发现其实没那么难，主要还是在基础上，根基越厚越容易过。\n但是还是有些坑爹的公司，比如提高面试难度，故意难为后让你报班的。进去和招人工作不一致的。\n该溜赶紧溜，直接下家\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 10,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1698150412714090498",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-03T02:02:13.000+00:00",
        "updateTime": "2023-09-08T06:42:02.000+00:00",
        "user": {
          "id": "1698150412714090498",
          "planetCode": "26426",
          "userName": "Onepunch-Man",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/gibDiao9otOxAeSqMpQCYyzPrD0f77SL4icFn5gq8mWgLh5VJBBeewJwjSdwKcd77MTuoQYiaEhlPmj0qG1Cibpk7kg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 10,
          "coin": 100,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-08-30T09:11:39.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-09-03T01:46:23.000+00:00",
          "updateTime": "2023-09-03T02:02:20.000+00:00"
        },
        "tags": [
          "文章",
          "自我介绍"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1697973869249404929",
        "title": "MyBatis-day-03 和 Maven 构建Java SE 项目",
        "description": "认识 MyBatis 多表查询 1对多 ,多对多",
        "content": "## MyBatis\n### 一对多查询\n 单向多对多之额外 SQL 查询\n根据 id 查询学生，并查询其老师。\n\n需要添加 Mapper 接口 和 Mapper XML\n\nStudentMapper 接口\n\n\n```java\npublic interface StudentMapper { \n\tStudent get(Long id);\n}\n```\n\n\nStudentMapper.xml 文件\n\n```xml\n<resultMap type=\"Student\" id=\"baseResultMap\"> \n\t<id column=\"id\" property=\"id\"/> \n\t<result column=\"name\" property=\"name\"/> \n\t<!-- 关联属性，让 MyBatis 发额外 SQL --> \n\t<collection select=\"cn.wolfcode.mapper.TeacherMapper.queryByStudentId\" column=\"id\" property=\"teachers\"/>\n</resultMap> \n<select id=\"get\" resultMap=\"baseResultMap\">\n\tSELECT id, name FROM student WHERE id = #{id}\n</select>\n```\n\n\nTeacherMapper\n\n```java\npackage xxx.xxx.mapper;\npublic interface queryByStudentId { \n\tTeacher get(Long id); \n        }\n```\n\n\nTeacherMapper.xml 文件\n\n```xml\n<select id=\"queryByStudentId\" resultType=\"Teacher\"> \n\tSELECT t.id, t.name \n\tFROM teacher_student ts \n\tJOIN teacher t ON ts.teacher_id = t.id\n\tWHERE ts.student_id = #{studentId} \n</select>\n```\n\n\n单元测试方法\n\n```java\npublic class Many2oneTest { \n\t@Test \n\tpublic void testGet() throws Exception { \n\t\tSqlSession session = MyBatisUtil.getSession(); \n\t\tStudentMapper studentMapper = session.getMapper(StudentMapper.class); \n\t\tStudent student = studentMapper.get(2L); \n\t\tSystem.out.println(student); session.close(); \n\t}\n}\n```\n\n\n\n### 多对多查询\n多对多映射关系\n什么是多对多关系： 一对多关系就是表A中一条数据对应表B中的多条数据，例如，用户和订单之间的关系，一个用户可以有多个订单信息。\n\n在mybatis中，与一对多映射一致，我们通过resultMap元素的子元素 `collection`来进行处理。\n\n`需要注意的是：在一对多映射和多对多映射中，collection 元素属行中使用的是ofType属性来指定实体对象，而不是使用JavaType属性。`\n\n\n\n#### resultType\n\n作用：将查询结果按照sql列名pojo属性名一致性映射到pojo中。\n场合：常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。\nresultMap\n\n使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。\n\n#### association：\n\n作用：将关联查询信息映射到一个pojo对象中。\n场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。\n使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。\n\n#### collection：\n\n作用：将关联查询信息映射到一个list集合中。\n场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。\n\n\n\n\n## Maven \nmaven 导入的jar包具有传递性,会自动导入该jar包需要的其他jar包\n\n### 安装Maven及配置相关文件,环境变量\n\n### 安装\n访问 Maven 的官方网站：https://maven.apache.org/。\n\n下载 Maven 的二进制发行版（Binary zip archive），选择最新版本并下载。\n\n解压下载的二进制发行版到你选择的安装目录，例如 C:\\Program Files\\apache-maven-3.x.x（Windows）或 /usr/local/apache-maven-3.x.x（Linux/Mac）\n\n### 配置环境变量\n\n\n\n3. 右键点击 \"此电脑\"（或 \"计算机\"），然后选择 \"属性\"。\n\n4. 在左侧面板中，点击 \"高级系统设置\"。\n\n6. 在 \"系统属性\" 对话框中，点击 \"环境变量\" 按钮。\n\n8. 在 \"系统变量\" 部分，找到 \"Path\" 变量，然后点击 \"编辑\"。\n\n10. 在 \"编辑环境变量\" 对话框中，点击 \"新建\"，并添加 Maven 的 bin 目录路径，例如 C:\\Program Files\\apache-maven-3.x.x\\bin。\n\n12. 点击 \"确定\" 关闭所有对话框。\n\n### 配置第三方中央仓库\n在maven 安装目录下打开 `settings.xml` 文件。\n\n在` <repositories> `元素中，你可以配置自定义的仓库。\n\n```xml\n\n<repositories>\n  <repository>\n    <id>myrepository</id>\n    <url>http://your-custom-repository-url.com</url>\n  </repository>\n</repositories>\n这里，<id> 是自定义仓库的唯一标识符，<url> 是仓库的地址。你可以添加多个自定义仓库。\n```\n\n保存`settings.xml `文件。\n\n### 在IDEA中使用Maven 构建JAVA SE 项目\n\n1. 打开 IntelliJ IDEA。\n\n3. 创建一个新的 Java 项目或打开现有的项目。\n\n5. 在项目的根目录中，你可以看到一个 pom.xml 文件，这是 Maven 项目的配置文件。确保该文件存在。\n\n7. 打开 IntelliJ IDEA 的项目设置：\n\n9. 在 Windows 上，点击 \"File\" > \"Settings\"。\n\n11. 在左侧面板中，选择 \"Build, Execution, Deployment\"（构建、执行、部署）。\n\n13. 在右侧窗格中，选择 \"Build Tools\"（构建工具）下的 \"Maven\"。\n\n15. 在 \"Maven home directory\"（Maven 安装目录）字段中，选择 Maven 安装的目录，例如 C:\\Program Files\\apache-maven-3.x.x（Windows）或 /usr/local/apache-maven-3.x.x（Linux/Mac）。\n\n17. 点击 \"Apply\" 和 \"OK\" 以保存设置。\n\n19. IntelliJ IDEA 现在将使用 Maven 来构建和管理你的 Java 项目。\n\n21. 你可以在 IntelliJ IDEA 的 Maven 工具窗口中执行 Maven 构建任务，例如 clean, install 等。打开 Maven 工具窗口的方式是点击底部的 \"Maven\" 标签或在 \"View\" > \"Tool Windows\" 中选择 \"Maven\"。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1673111457186713601/PY3E81xY-maven-logo.png",
        "language": null,
        "viewNum": 5,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-02T14:04:51.000+00:00",
        "updateTime": "2023-09-08T13:26:03.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 5,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-07T09:24:25.000+00:00"
        },
        "tags": [
          "文章",
          "框架",
          "后端",
          "Java",
          "Java 基础",
          "笔记"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "159",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "16"
  },
  "message": "ok"
}